// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  bookings      Booking[]
}

model Profile {
  id        String   @id @default(cuid())
  phone     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Space {
  id          String    @id @default(cuid())
  name        String
  type        SpaceType
  description String?
  capacity    Int
  pricePerHour Int
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(CONFIRMED)
  totalPrice Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  space     Space    @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([spaceId])
  @@index([startTime])
}

enum SpaceType {
  OPEN_SPACE
  BOOTH
  MEETING_ROOM_SMALL
  MEETING_ROOM_LARGE
  PRIVATE_OFFICE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}